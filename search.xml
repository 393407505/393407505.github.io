<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>六、spring boot连接数据库</title>
      <link href="2020/12/04/%E5%85%AD%20%E3%80%81spring%20boot%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2020/12/04/%E5%85%AD%20%E3%80%81spring%20boot%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要介绍了使用spring boot 进行数据库配置</p></blockquote><a id="more"></a><p>1、 导入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、 进行对应的数据库配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/book?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>3 、对数据连接进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">zaxxer</span>.<span class="title">hikari</span>.<span class="title">HikariDataSource</span></span></span><br><span class="line"><span class="class"><span class="title">HikariProxyConnection</span>@2127481101 <span class="title">wrapping</span> <span class="title">com</span>.<span class="title">mysql</span>.<span class="title">cj</span>.<span class="title">jdbc</span>.<span class="title">ConnectionImpl</span>@588<span class="title">f63c</span></span></span><br></pre></td></tr></table></figure><p>spring boot 2数据库连接默认使用的是HikariDataSource，而不再是tomcat</p><p>同时，我们可以使用spring.datasource.type来指定数据源</p><p><a href="https://blog.csdn.net/lizhiqiang1217/article/details/90573759">Hakari介绍以及连接</a></p><p>4、DataSourceInitializer </p><p>​    作用：</p><p>​    1）、运行建表语句createSchema()</p><p>​    2）、初始化数据语句initSchema()</p><p>​    3）、默认的sql语句命名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fallbackResources.add(<span class="string">&quot;classpath*:&quot;</span> + fallback + <span class="string">&quot;-&quot;</span> + platform + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line">fallbackResources.add(<span class="string">&quot;classpath*:&quot;</span> + fallback + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line">fallback可以是：Data，Schema</span><br></pre></td></tr></table></figure><p>​    4）、自定义sql语句文件名</p><p>5、自动执行建表语句</p><p>​    在spring boot2版本中，自动执行建表语句默认是关闭的，需要在配置文件中开启，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># 自定义sql文件路径名称</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:department.sql</span></span><br></pre></td></tr></table></figure><p>6、操作数据库：在springboot中，使用JDBCTemplate来操作数据库</p><h2 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h2><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>整合Druid</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置一个管理后台的servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServlet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        initParams.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        initParams.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        initParams.put(<span class="string">&quot;deny&quot;</span>,<span class="string">&quot;192.168.1.2&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置一个过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistration</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        Map&lt;String,String&gt; initParams=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改配置文件（application.yml）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT1FROMDUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">logSlowSql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>注：过滤器中的log4j需要导入相关依赖</p><h2 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h2><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置数据源（整合Druid）</p></li><li><p>为数据库建表</p></li><li><p>创建Java Bean</p></li></ul><h3 id="1、通过注解对数据库进行增删改查"><a href="#1、通过注解对数据库进行增删改查" class="headerlink" title="1、通过注解对数据库进行增删改查"></a>1、通过注解对数据库进行增删改查</h3><ul><li><p>配置Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from department where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from department where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span><span class="comment">//获取自增id</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into department(departmentName) values(#&#123;departmentName&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过controller进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> departmentMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">insertDept</span><span class="params">(Department department)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        departmentMapper.insertDept(department);</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用自定义的驼峰命名规则;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">customizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以使用MapperScan加在主程序上指定扫描的Mapper路径，通过指定扫描路径后，接口上的Mapper注解就可以去掉了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(value = &quot;com.huoqiang.demo06.mapper&quot;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2、通过配置文件对数据库进行操作"><a href="#2、通过配置文件对数据库进行操作" class="headerlink" title="2、通过配置文件对数据库进行操作"></a>2、通过配置文件对数据库进行操作</h3><ul><li><p>设置mybatis配置文件路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mapper/mybatis-config.xml</span> <span class="comment">#指定全局配置文件映射</span></span><br><span class="line">  <span class="string">mapper-locations:#</span> <span class="string">指定sql映射文件位置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath:mybatis/mapper/mapper/*.xml</span></span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在sql文件中进行映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.huoqiang.demo06.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--public Employee getEmpById(Integer id);</span></span><br><span class="line"><span class="comment">    public void insertEmp(Employee employee);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.huoqiang.demo06.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from employee where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp&quot;</span>&gt;</span></span><br><span class="line">        insert into employee (lastName,email,gender,d_id)values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过controller进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmpById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="通过JPA操作数据库"><a href="#通过JPA操作数据库" class="headerlink" title="通过JPA操作数据库"></a>通过JPA操作数据库</h2><ul><li>整合SpringData Jpa<ul><li>JPA：ORM（Object Ralational Mapping）；</li></ul></li></ul><p>1、 编写一个实体类（Bean）和数据表进行映射，并且配置好映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tbl_user&quot;)</span> <span class="comment">//@Table 来指定和哪个数据表进行对应；如果省略，则表名默认是类名小写。即user</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//可以自定义名称，省略则默认为属性名</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><p>2、编写一个dao接口来操作实体类对应的数据表（Repository）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JPARepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 基本的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring</span></span><br><span class="line"> <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line"><span class="comment">#     更新或创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#     控制台显示sql</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、Docker基础</title>
      <link href="2020/12/04/%E4%BA%94%E3%80%81%20Docker/"/>
      <url>2020/12/04/%E4%BA%94%E3%80%81%20Docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要介绍了docker的作用以及常用的docker命令</p></blockquote><a id="more"></a><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Docker是一个开源的应用容器引擎；</p><p>Docker支持将软件编译成一个镜像，然后在镜像中做好各种软件的配置，将镜像发布出去，其他使用者就可以直接使用这些镜像。运行中的这个镜像称为容器，而容器的启动时非常迅速的。</p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机，安装了docker程序的机器</p><p>docker客户端：连接docker主机进行操作</p><p>docker仓库：用来保存各种打包好的镜像</p><p>docker镜像：软件打包好的镜像</p><p>docker容器：镜像启动后的实例称为一个容器</p><p>使用docker的步骤：安装docker</p><p>去docker仓库找到打包好的镜像</p><p>使用docker运行镜像，这个镜像会生成一个docker容器。</p><p>对容器的启动和停止就是对软件的启动和停止。</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><ul><li><p>安装虚拟机</p><ul><li><p>VMWare、VirtualBox（安装）</p></li><li><p>导入虚拟机文件</p></li><li><p>双击启动linux虚拟机，使用root/123456登录</p></li><li><p>使用客户端连接Linux服务器进行命令操作</p></li><li><p>设置虚拟网路为桥接网络+选好网卡</p></li><li><p>设置好网络后使用命令重启虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></li><li><p>查看ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure></li><li><p>使用客户端连接</p></li></ul></li><li><p>在虚拟上安装docker</p><ul><li>检查内核版本，必须是3.10以上（uname -r）</li><li>安装docker（yum install docker）</li><li>启动docker（systemctl start docker）</li><li>设置虚拟机开机启动dacker（systemctl enable docker）</li><li>停止docker（systemctl stop docker）</li></ul></li><li><p>docker常用命令</p><ul><li>docker search  镜像名  搜索对应的docker镜像</li><li>docker pull 镜像名：tag   拉取、下载镜像</li><li>docker images 查看所有本地镜像</li><li>docker rmi image-id 删除指定的本地镜像</li></ul></li><li><p>docker 容器常用操作</p><ul><li><p>运行镜像—–产生一个容器（正在运行的程序）</p></li><li><p>docker run –name 自定义容器名 -d 镜像名：镜像id （-d 表示后台运行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# docker run --name mysql -d mysql:latest</span><br></pre></td></tr></table></figure></li><li><p>docker ps (查看运行中的容器)</p></li><li><p>docker stop 容器id/容器名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# docker stop mysql</span><br></pre></td></tr></table></figure></li><li><p>docker start 容器id（启动容器）</p></li><li><p>启动一个做了端口映射的tomcat  docker run -d -p 8888：8080  tomcat（-p 将主机端口映射到容器的一个端口，格式为  主机端口：容器端口）</p></li><li><p>[root@192 ~]# service firewalld status 关闭防火墙</p></li><li><p>docker logs 查看容器日志</p></li><li><p><a href="https://docs.docker.com/engine/reference/commandline/docker/">更多命令参考</a></p></li></ul></li></ul><h2 id="4、安装mysql"><a href="#4、安装mysql" class="headerlink" title="4、安装mysql"></a>4、安装mysql</h2><p>错误的启动方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# docker run --name mysql01 -d mysql</span><br></pre></td></tr></table></figure><p>查看日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# docker logs c23e5b24fff1</span><br><span class="line">2020-04-27 07:58:17+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.19-1debian10 started.</span><br><span class="line">2020-04-27 07:58:17+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;</span><br><span class="line">2020-04-27 07:58:17+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.19-1debian10 started.</span><br><span class="line">2020-04-27 07:58:17+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified</span><br><span class="line">        You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD</span><br><span class="line">        我们需要指定这三个参数中的一个</span><br></pre></td></tr></table></figure><p>正确的启动方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br><span class="line">0dc8a61e6cc7906d6f6f86f87348c007bd28b68bc606433b60d93c7d0ce25548</span><br><span class="line">[root@192 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES</span><br><span class="line">0dc8a61e6cc7        mysql               &quot;docker-entrypoint...&quot;   8 seconds ago       Up 6 seconds        3306/tcp, 33060/tcp   mysql01</span><br><span class="line">出现的端口信息，但现在未作端口映射</span><br></pre></td></tr></table></figure><p>做端口映射并远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@192 ~]# docker run --name mysql02 -p 3305:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br><span class="line">e21fd50f21d0683183ab8d34f2ed9b3469b5d539e83c56531ef04a77005db806</span><br><span class="line">[root@192 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">e21fd50f21d0        mysql               &quot;docker-entrypoint...&quot;   4 seconds ago       Up 3 seconds        33060/tcp, 0.0.0.0:3305-&gt;3306/tcp   mysql02</span><br><span class="line">0dc8a61e6cc7        mysql               &quot;docker-entrypoint...&quot;   4 minutes ago       Up 4 minutes        3306/tcp, 33060/tcp                 mysql01</span><br></pre></td></tr></table></figure><p>若出现错误报错2058plugin caching sha2_password could not be loaded:</p><p>解决方案（在centos7环境下）：</p><ol><li><p>进入mysql容器</p><p>docker exec -it mysql2 /bin/bash</p></li><li><p>进入mysql</p><p>mysql -uroot -pmima</p></li><li><p>修改密码</p><p>ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;</p></li></ol><p>即可通过IP地址和映射端口号进行连接</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、Web开发</title>
      <link href="2020/12/04/%E5%9B%9B%E3%80%81Web%E5%BC%80%E5%8F%91/"/>
      <url>2020/12/04/%E5%9B%9B%E3%80%81Web%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要介绍了使用spring boot对数据进行一系列操作（CRUD）以及在不使用数据库的前提下进行简单的数据交互</p></blockquote><a id="more"></a><h2 id="1、使用Spring-Boot-开发"><a href="#1、使用Spring-Boot-开发" class="headerlink" title="1、使用Spring  Boot 开发"></a>1、使用Spring  Boot 开发</h2><ul><li>创建Spring boot 应用，选中所需要的模块</li><li>大部分的配置由spring boot 自己设定，我们只需要在配置文件中修改少量配置即可</li><li>自己编写业务代码</li></ul><p>*<em>自动配置原理 *</em> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxAutoConfiguration <span class="comment">//帮我们自动配置组件</span></span><br><span class="line">xxxProperties <span class="comment">//配置类来封装配置文件的内容</span></span><br></pre></td></tr></table></figure><h2 id="2、Spring-Boot静态资源映射规则"><a href="#2、Spring-Boot静态资源映射规则" class="headerlink" title="2、Spring Boot静态资源映射规则"></a>2、Spring Boot静态资源映射规则</h2><blockquote><p>源码分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">                CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/webjars/**&quot;</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>所有/webjars/**，默认路径为：classpath:/META-INF/resources/webjars/；（webjars是以jar包的方式引入静态资源）<a href="https://www.webjars.org/">webjars官网</a></li><li>/**,即以下目录的静态文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]</span><br><span class="line">    &#123;<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;classpath:/META-INF/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/static/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/public/</span></span><br></pre></td></tr></table></figure><ul><li><p>欢迎页；静态资源文件夹下的所有index.html文件，被/**映射</p></li><li><p>手动配置静态路径：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><blockquote><p>JSP ，Thymeleaf， Freemarker等</p><p>spring boot 推荐使用Thymeleaf</p></blockquote><h3 id="1、引入Thymeleaf依赖"><a href="#1、引入Thymeleaf依赖" class="headerlink" title="1、引入Thymeleaf依赖"></a>1、引入Thymeleaf依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入thymeleaf模板引擎--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    切换thymleaf版本–在properties中引入如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 布局功能的支持程序 thymeleaf3主程序 对应 layout2以上版本 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf2 对应 layout1版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="2、Thymeleaf语法"><a href="#2、Thymeleaf语法" class="headerlink" title="2、Thymeleaf语法"></a>2、Thymeleaf语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">  <span class="comment">//只要我们把html页面放在类路径下的templates文件夹下，thymeleaf就可以自动渲染了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><ul><li><p>由自动配置源码可知 只要我们把html页面放在类路径下的templates文件夹下，thymeleaf就可以自动渲染了</p></li><li><p>使用thymeleaf</p><ul><li><p>导入thymeleaf的名称空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用thymeleaf语法</p></li></ul></li></ul><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>th:任意html属性；来替换任意原生属性的值</li></ul><ul><li>表达式格式</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Simple</span> <span class="string">expressions:#表达式语法</span></span><br><span class="line"><span class="attr">Variable Expressions:</span> <span class="string">$&#123;...&#125;</span> </span><br><span class="line"><span class="comment"># 获取对象的属性，调用方法</span></span><br><span class="line"><span class="comment"># 使用内置的基本对象</span></span><br><span class="line"><span class="comment"># 内置的工具对象</span></span><br><span class="line"><span class="attr">Selection Variable Expressions:</span> <span class="string">*&#123;...&#125;</span> </span><br><span class="line"><span class="comment"># 变量的选择表达式 和$&#123;&#125;在功能上大致相同 可以配合th：Object进行使用</span></span><br><span class="line"><span class="attr">Message Expressions:</span> <span class="comment">#&#123;...&#125; </span></span><br><span class="line"><span class="comment"># 获取国际化内容</span></span><br><span class="line"><span class="attr">Link URL Expressions:</span> <span class="string">@&#123;...&#125;</span> </span><br><span class="line"><span class="comment"># 定义url链接的,获取路径</span></span><br><span class="line"><span class="attr">Fragment Expressions:</span> <span class="string">~&#123;...&#125;</span></span><br><span class="line"><span class="comment"># 插入代码片段，用于抽取公共部分的代码</span></span><br><span class="line"><span class="string">Literals</span></span><br><span class="line"><span class="attr">Text literals:</span> <span class="string">&#x27;one text&#x27;</span> <span class="string">,</span> <span class="string">&#x27;Another one!&#x27;</span> <span class="string">,…</span> </span><br><span class="line"><span class="attr">Number literals:</span> <span class="number">0</span> <span class="string">,</span> <span class="number">34</span> <span class="string">,</span> <span class="number">3.0</span> <span class="string">,</span> <span class="number">12.3</span> <span class="string">,…</span> </span><br><span class="line"><span class="attr">Boolean literals:</span> <span class="literal">true</span> <span class="string">,</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">Null literal: null Literal tokens:</span> <span class="string">one</span> <span class="string">,</span> <span class="string">sometext</span> <span class="string">,</span> <span class="string">main</span> <span class="string">,…</span></span><br><span class="line"><span class="attr">Text operations:</span></span><br><span class="line"><span class="attr">String concatenation:</span> <span class="string">+</span> </span><br><span class="line"><span class="attr">Literal substitutions:</span> <span class="string">|The</span> <span class="string">name</span> <span class="string">is</span> <span class="string">$&#123;name&#125;|</span></span><br><span class="line"><span class="attr">Arithmetic operations:</span></span><br><span class="line"><span class="attr">Binary operators:</span> <span class="string">+</span> <span class="string">,</span> <span class="bullet">-</span> <span class="string">,</span> <span class="string">*</span> <span class="string">,</span> <span class="string">/</span> <span class="string">,</span> <span class="string">%</span> </span><br><span class="line"><span class="string">Minus</span> <span class="string">sign</span> <span class="string">(unary</span> <span class="string">operator):</span> </span><br><span class="line"><span class="attr">Boolean operations:</span></span><br><span class="line"><span class="attr">Binary operators:</span> <span class="string">and</span> <span class="string">,</span> <span class="string">or</span> </span><br><span class="line"><span class="string">Boolean</span> <span class="string">negation</span> <span class="string">(unary</span> <span class="string">operator):</span> <span class="string">!</span> <span class="string">,</span> <span class="string">not</span></span><br><span class="line"><span class="attr">Comparisons and equality:</span></span><br><span class="line"><span class="attr">Comparators:</span> <span class="string">&gt;</span> <span class="string">,</span> <span class="string">&lt;</span> <span class="string">,</span> <span class="string">&gt;=</span> <span class="string">,</span> <span class="string">&lt;=</span> <span class="string">(</span> <span class="string">gt</span> <span class="string">,</span> <span class="string">lt</span> <span class="string">,</span> <span class="string">ge</span> <span class="string">,</span> <span class="string">le</span> <span class="string">)</span> </span><br><span class="line"><span class="attr">Equality operators:</span> <span class="string">==</span> <span class="string">,</span> <span class="type">!=</span> <span class="string">(</span> <span class="string">eq</span> <span class="string">,</span> <span class="string">ne</span> <span class="string">)</span></span><br><span class="line"><span class="attr">Conditional operators:</span></span><br><span class="line"><span class="attr">If-then:</span> <span class="string">(if)</span> <span class="string">?</span> <span class="string">(then)</span> </span><br><span class="line"><span class="attr">If-then-else:</span> <span class="string">(if)</span> <span class="string">?</span> <span class="string">(then)</span> <span class="string">:</span> <span class="string">(else)</span> </span><br><span class="line"><span class="attr">Default:</span> <span class="string">(value)</span> <span class="string">?:</span> <span class="string">(defaultvalue)</span></span><br></pre></td></tr></table></figure><h2 id="3、Spring-MVC自动配置"><a href="#3、Spring-MVC自动配置" class="headerlink" title="3、Spring MVC自动配置"></a>3、Spring MVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-developing-web-applications">官方文档链接</a></p><p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.<ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向））</li><li>组合所有的视图解析器</li><li>我们可以自己给容器中添加一个视图解析器,自动的将其组合进来</li></ul></li><li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).<ul><li>支持服务端的静态资源</li></ul></li><li>Automatic registration of <code>Converter</code>（格式转换）, <code>GenericConverter</code>, and <code>Formatter</code> （格式化器）beans.</li><li>Support for <code>HttpMessageConverters</code> （消息转换器，转换http请求和响应的）(covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).<ul><li>自己给容器中添加HTTPMessageConverters</li></ul></li><li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</li><li>Static <code>index.html</code> support.</li><li>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</li><li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).<ul><li>也可以自己配置对默认的进行替换</li></ul></li></ul><h2 id="4、如何修改Spring-Boot的默认配置"><a href="#4、如何修改Spring-Boot的默认配置" class="headerlink" title="4、如何修改Spring Boot的默认配置"></a>4、如何修改Spring Boot的默认配置</h2><p>模式：</p><p>​    1、Spring boot 在自动配置组件的时候，先看容器中有没有用户自己配置的（@Bean，@Component），如果有就用用户默认配置的，否则就会自动配置，如果有些组件可以有多个，将用户配置的和自己默认的组合起来。</p><p>​    2、If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/huoqiag&quot;</span>).setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    3、 If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.（不推荐）</p><h2 id="5、CRUD实验（web实验）"><a href="#5、CRUD实验（web实验）" class="headerlink" title="5、CRUD实验（web实验）"></a>5、CRUD实验（web实验）</h2><h3 id="1、导入项目资源"><a href="#1、导入项目资源" class="headerlink" title="1、导入项目资源"></a>1、导入项目资源</h3><ul><li><p>将配置类导入到java目录下面</p></li><li><p>将静态文件导入到res/static目录下(css,js,图片等)</p></li><li><p>将html文件导入到template目录下面（便于使用thymeleaf配置）</p></li><li><p>设置主页（登录页）为登录界面</p><ul><li>可以将主页命名为index.html然后直接访问local host：8080</li><li>也可以注入视图解析（自定义配置类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huoqiang.demo04web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用webjar的方式引入bootstrap依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入bootstrap--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用thymeleaf语句替换默认的静态配置,这样做的好处是当修改访问路径地址时，th会自动适配地址的变化</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/bootstrap.min.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/signin.css &quot;</span><span class="attr">th:href</span>=<span class="string">&quot;@&#123;/asserts/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/asserts/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/img/bootstrap-solid.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、国际化"><a href="#2、国际化" class="headerlink" title="2、国际化"></a>2、国际化</h3><p>（使用spring mvc）</p><ul><li>编写国际化配置文件</li><li>使用ResourceBundleMessageSource管理国际化资源文件</li><li>在页面使用fmt：message取出国际化内容</li></ul><p>（使用spring boot）</p><ul><li><p>编写国际化配置文件，抽取页面需要显示的国际化消息</p><ul><li>在resources下创建目录，用于存放国际化配置文件</li><li>分别命名为：login.properties,login_zh_CN.properties, login_en_US.properties,然后对文件进行配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">login.btn</span>=<span class="string">登录~</span></span><br><span class="line"><span class="meta">login.password</span>=<span class="string">密码~</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">记住我~</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">请登录</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">用户名~</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">login.btn</span>=<span class="string">登录</span></span><br><span class="line"><span class="meta">login.password</span>=<span class="string">密码</span></span><br><span class="line"><span class="meta">login.remember</span>=<span class="string">记住我</span></span><br><span class="line"><span class="meta">login.tip</span>=<span class="string">请登录</span></span><br><span class="line"><span class="meta">login.username</span>=<span class="string">用户名</span></span><br></pre></td></tr></table></figure></li><li><p>spring boot 自动配置好了管理国际化资源文件的组件</p></li><li><p>去页面获取格式化的值</p><blockquote><p>配置文件乱码问题设置：找到File/settings/File Encoding 设置界面，设置properties文件的编码格式为utf8，并且勾选自动转ASCII码</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/bootstrap.min.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/signin.css &quot;</span><span class="attr">th:href</span>=<span class="string">&quot;@&#123;/asserts/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;dashboard.html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/asserts/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/img/bootstrap-solid.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span> &gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>将需要进行语言变换的位置使用th表达式进行控制，上述代码可以实现随浏览器默认语言而自动变更语言</p><blockquote><p>注意：input标签需使用行内表达式 即[[……]]</p></blockquote></li><li><p>原理：国际化Locale（区域信息对象）；LocaleResolver（区域化信息对象）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">            prefix = &quot;spring.mvc&quot;,</span></span><br><span class="line"><span class="meta">            name = &#123;&quot;locale&quot;&#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">                localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">                <span class="keyword">return</span> localeResolver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//默认的就是通过请求头的内容获取语言信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>点击链接切换国际化<ul><li>(html设置回传参数)</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置自定义区域信息类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huoqiang.demo04web.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链接上携带语言信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取请求头的参数</span></span><br><span class="line">        String s = httpServletRequest.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">      <span class="comment">//定义区域化对象设置为默认值</span></span><br><span class="line">        Locale locale=Locale.getDefault();</span><br><span class="line">      <span class="comment">//如果返回参数不为空</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(s))</span><br><span class="line">        &#123;</span><br><span class="line">            String[] s1 = s.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(s1[<span class="number">0</span>], s1[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加入自定义配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huoqiang.demo04web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huoqiang.demo04web.component.MyLocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//区域化信类配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、登录"><a href="#3、登录" class="headerlink" title="3、登录"></a>3、登录</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁用开发缓存（禁用之后修改代码后刷新即可访问！）</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>2）、页面修改完成后通过ctrl+F9；重新进行编译</p><p>3）、登录错误显示信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4) 、 拦截器做登录检查</p><h3 id="4、-CRUD-员工列表"><a href="#4、-CRUD-员工列表" class="headerlink" title="4、 CRUD-员工列表"></a>4、 CRUD-员工列表</h3><p>要求</p><ul><li>restfulCRUD：CRUD满足Rest风格</li><li>uri：/资源名称/资源标识  以http的请求方式来区分对crud的操作</li></ul><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp——Get</td></tr><tr><td>添加</td><td>addEmp？xxx</td><td>emp——Post</td></tr><tr><td>修改</td><td>updateEmp？id=xxx&amp;xxx=xxx</td><td>emp/{id}——Put</td></tr><tr><td>删除</td><td>deleateEmp？id=1</td><td>emp/{id}——Delete</td></tr></tbody></table><p>实验的请求架构：</p><table><thead><tr><th></th><th>请求uri</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>Get</td></tr><tr><td>查询某个员工</td><td>emp/{id}</td><td>Get</td></tr><tr><td>添加页面</td><td>emp</td><td>Get</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工信息进行信息回写）</td><td>emp/{id}</td><td>Get</td></tr><tr><td>修改员工信息</td><td>emp</td><td>Put</td></tr><tr><td>删除员工信息</td><td>emp/{id}</td><td>Delete</td></tr></tbody></table><p>thymeleaf公共页面元素抽取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>      <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">~&#123;templatename::selector&#125;  模板名：：选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125; 模板名：：片段名</span><br><span class="line"></span><br><span class="line">3、默认效果</span><br><span class="line">在insert定义的div中</span><br><span class="line">如果使用th：insert等属性进行引入，可以不用谢~&#123;&#125;</span><br></pre></td></tr></table></figure><p>三种引入th公共片段的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>  </span><br><span class="line">   <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery </span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> 插入到声明引入的片段中</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> 将声明引入的元素替换为公共片段</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> 将被引入的片段的内容包含进这个标签</span><br><span class="line"></span><br><span class="line">插入结果分别如下：</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">footer</span>&gt;</span>      </span><br><span class="line">     <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>    </span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>引入片段的时候传入参数实现动态应用样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar.html::#sidebar(activeuri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeuri==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeuri==&#x27;emps&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加数据时的日期格式问题</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化：spring MVC将页面提交的值需要转换为页面指定的类型</p><p>默认日期是按照/的方式，通过配置文件来修改日期格式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定日期的格式</span></span><br><span class="line"><span class="meta">spring.mvc.date-format</span>=<span class="string">yyyy-MM-DD</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、spring boot日志</title>
      <link href="2020/12/04/%E4%B8%89%E3%80%81Spring%20boot%20%E6%97%A5%E5%BF%97/"/>
      <url>2020/12/04/%E4%B8%89%E3%80%81Spring%20boot%20%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要介绍了spring boot日志框架的选用以及配置</p></blockquote><a id="more"></a><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><blockquote><p>市面上的日志框架：JUL、JCL，JBoss-logging、log4j、log4j2、slf4j …</p></blockquote><table><thead><tr><th>日志门面</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL（Jakarta Commons Logging）SLF4j（Simple Logging Facade for Java）</td><td>Log4j JUL（java.util.logging） Log4j2 Logback</td></tr></tbody></table><p>左边选一个门面（抽象层）、右边选一个来实现</p><p>日志门面：SLF4J</p><p>日志实现：Logback</p><p>Spring Boot ：底层是Spring 框架，Spring 框架默认使用的是JCL；Spring boot 选用SLF4J和Logback</p><h2 id="2、-SLF4j的使用"><a href="#2、-SLF4j的使用" class="headerlink" title="2、 SLF4j的使用"></a>2、 SLF4j的使用</h2><h3 id="1、如何在系统中使用SLF4j"><a href="#1、如何在系统中使用SLF4j" class="headerlink" title="1、如何在系统中使用SLF4j"></a>1、如何在系统中使用SLF4j</h3><p>日志方法的调用，不应该直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><ul><li>给系统里导入slf4j的jar包和logback的jar包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.slf4j.org/manual.html">源自slf4j参考手册</a></p><ul><li>每一个日志的实现框架都有自己的配置文件，使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件。</li></ul><h2 id="2、遗留问题-如何统一日志记录"><a href="#2、遗留问题-如何统一日志记录" class="headerlink" title="2、遗留问题(如何统一日志记录)"></a>2、遗留问题(如何统一日志记录)</h2><p>a(slf4j+logback):spring(commons-logging)、Hibernate(Jboss-logging)、MyBatis…</p><p>统一日志记录，即使是别的框架也使用slf4j进行日志文件的配置，操作步骤如下：</p><ul><li>将系统中其他的日志框架先排除</li><li>使用中间包对原有的日志框架进行替换</li><li>再使用slf4j的其他实现方式</li></ul><p><a href="http://www.slf4j.org/legacy.html">参见官网说明</a></p><h2 id="3、Spring-Boot日志关系"><a href="#3、Spring-Boot日志关系" class="headerlink" title="3、Spring Boot日志关系"></a>3、Spring Boot日志关系</h2><ul><li>创建一个web项目</li><li>打开pom文件</li><li>右键Diagrams/Show Dependences 查看各组件的依赖，可以看到spring boot 使用的日志框架</li><li>可以看到Spring boot底层也使用slf4j进行日志记录，并且把其他的日志都替换成了slf4j的替代包</li><li>在引入其他框架时，一定要把这个框架的默认日志依赖移除掉</li><li>Spring boot 能自动适配所有类型的日志，并且使用slf4j和logback进行日志记录</li></ul><h2 id="4、日志的使用"><a href="#4、日志的使用" class="headerlink" title="4、日志的使用"></a>4、日志的使用</h2><ul><li><p>Spring Boot 默认已经配好了日志记录</p></li><li><p>通过测试类测试日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo03logApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">//记录器</span></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 日志的级别：以下由低到高</span></span><br><span class="line"><span class="comment">         * 可以通过这种方式调整输出的日志级别；日志只会显示不小于该级别的日志</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        logger.trace(<span class="string">&quot;这是trace日志&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;这是debug日志&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;这是info日志&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;这是warning日志&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;这是error日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">15</span> <span class="number">16</span>:<span class="number">46</span>:<span class="number">30.544</span>  INFO <span class="number">9880</span> --- [           main] c.h.demo03log.Demo03logApplicationTests  : 这是info日志</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">15</span> <span class="number">16</span>:<span class="number">46</span>:<span class="number">30.544</span>  WARN <span class="number">9880</span> --- [           main] c.h.demo03log.Demo03logApplicationTests  : 这是warning日志</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">15</span> <span class="number">16</span>:<span class="number">46</span>:<span class="number">30.544</span> ERROR <span class="number">9880</span> --- [           main] c.h.demo03log.Demo03logApplicationTests  : 这是error日志</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到Spring Boot默认只会输出info级别及以上的日志信息</p><ul><li>spring boot的相关配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以通过修改配置文件来指定某个项目的日志级别</span></span><br><span class="line"><span class="meta">logging.level.com.huoqiang.demo03log</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将日志输出到指定文件（不添加路径时默认为项目的根路径）</span></span><br><span class="line"><span class="meta">logging.file.name</span>=<span class="string">springboot.log</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定日志文件的输出位置</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">D:\\SpringStudy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#logging.file.name=springboot.log，logging.file.path=D:\\SpringStudy两个属性只能指定一个，同时指定时 path不会生效</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;!--</span></span><br><span class="line">        <span class="attr">日志输出格式：</span></span><br><span class="line"><span class="attr">%d表示日期时间，</span></span><br><span class="line"><span class="attr">%thread表示线程名，</span></span><br><span class="line"><span class="attr">%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="meta">%logger&#123;50&#125;</span> <span class="string">表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="attr">%msg：日志消息，</span></span><br><span class="line"><span class="attr">%n是换行符</span></span><br><span class="line">        <span class="attr">--&gt;</span></span><br><span class="line"><span class="comment">#设置控制台输出日志格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; -%msg%n</span></span><br><span class="line"><span class="comment">#设置文件中日志输出格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; -%msg%n</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="指定配置"><a href="#指定配置" class="headerlink" title="指定配置"></a>指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；spring boot 就不会使用自己的默认配置了</p><ul><li>各日志文件所支持的名称</li></ul><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><ul><li><p>可以使用profile进行日志配置的动态加载，以Logback日志配置文件为例</p><ul><li><p>当命名为：logback.xml时，配置文件可直接由日志框架识别</p></li><li><p>当名为：logback-spring.xml 时，日志框架并不会直接加载配置文件，可有spring boot 配置来决定使用什么样的配置。</p></li><li><p>建议使用logback-spring.xml 命名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;staging&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span><span class="comment">&lt;!--当profile名为dev时使用该格式输出日志--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &gt;&gt;[%thread] &gt;&gt;%-5level &gt;&gt;%logger&#123;50&#125; &gt;&gt;- %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!dev&quot;</span>&gt;</span><span class="comment">&lt;!--当profile名为！dev时使用该格式输出日志--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==[%thread] ==%-5level ==%logger&#123;50&#125; ==- %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5、切换日志文件"><a href="#5、切换日志文件" class="headerlink" title="5、切换日志文件"></a>5、切换日志文件</h2><ul><li>按照slf4j的日志适配图进行相关切换（日常并不推荐）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、配置文件</title>
      <link href="2020/12/04/%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2020/12/04/%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要介绍了spring boot的配置文件、两种配置文件的写法</p></blockquote><a id="more"></a><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>spring boot 使用一个全局的配置文件，并且名称固定；</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用：修改spring boot 配置的默认值；spring boot默认已经做好了配置。</p><p>yml文件使用YAML语言进行编写。YAML语言以数据为中心，相比json、xml更适合作配置文件；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span> </span><br></pre></td></tr></table></figure><h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><ul><li>K:(空格) v  表示一对键值对（空格必须有，语法要求）只能用空格，不能tab</li><li>以空格的缩进控制层级关系；只要是左对齐的一列数据，都是统一层级的。</li><li>属性和值的大小写敏感</li></ul><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><ul><li><p>字面量：普通的值（数字，字符串，布尔值）</p><ul><li>K: V   – 直接写字面量</li><li>字符默认不用加上单引号或者双引号；</li><li>双引号不会转义里面的特殊字符，特殊字符会作为其本身意思作用 如<code>name: &quot;zhang san \n li si&quot;</code>输出结果为：zhang san 换行 li si。</li><li>单引号引起的内容，特殊字符会被转义，最为字符数据输出</li></ul></li><li><p>对象、Map（属性和值）（键值对）</p><ul><li><p>对象还是K: V 形式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ZhangSan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">name:</span> <span class="string">ZhangSan</span>,<span class="attr">age:</span> <span class="number">20</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组（list、set）</p><ul><li><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure></li><li><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> &#123;<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pet</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3、获取配置文件值注入"><a href="#3、获取配置文件值注入" class="headerlink" title="3、获取配置文件值注入"></a>3、获取配置文件值注入</h2><h3 id="使用注解-ConfigurationProperties将配置文件进行注入"><a href="#使用注解-ConfigurationProperties将配置文件进行注入" class="headerlink" title="使用注解@ConfigurationProperties将配置文件进行注入"></a>使用注解@ConfigurationProperties将配置文件进行注入</h3><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ZhangSan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/4/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wangwu</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">yiwei</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>javaBean目录:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中每一个属性的值映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>:告诉springboot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix = &quot;person&quot; 指定配置文件的内容</span></span><br><span class="line"><span class="comment"> *只有这个组件是容器中的组件，才能使用该注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt;maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt;list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//省略头部以及get、set方法</span></span><br></pre></td></tr></table></figure><p>使用@ConfigurationProperties需要导入以下依赖，并且使用@Component注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-Value注解将配置文件进行注入"><a href="#使用-Value注解将配置文件进行注入" class="headerlink" title="使用@Value注解将配置文件进行注入"></a>使用@Value注解将配置文件进行注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;property name=&quot;name&quot;,value=&quot;字面量/$&#123;key&#125;从环境变量，配置文件中获取值/#&#123;Spel&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> boss;</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><ul><li>注解@Value和@ConfigurationProperties的区别</li></ul><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>必须对每一个成员进行指定</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件无论yml还是properties都可以进行注入</p><p>如果只需要获取配置文件中某项的值，可以使用@Value</p><p>如果需要有专门的javaBean文件和配置文件进行映射，可以使用@ConfigurationProperties注解</p><h3 id="对数据文件进行数据校验"><a href="#对数据文件进行数据校验" class="headerlink" title="对数据文件进行数据校验"></a>对数据文件进行数据校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中每一个属性的值映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>:告诉springboot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix = &quot;person&quot; 指定配置文件的内容</span></span><br><span class="line"><span class="comment"> *只有这个组件是容器中的组件，才能使用该注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Validated</span> 校验注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Email表示数据必须为邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><h2 id="4、-PropertySource-amp-ImportResource"><a href="#4、-PropertySource-amp-ImportResource" class="headerlink" title="4、@PropertySource&amp;@ImportResource"></a>4、@PropertySource&amp;@ImportResource</h2><ul><li><p>@PropertySource : 加载指定的配置文件,区别于全局配置文件（名为application的配置文件）可以把一些配置独立出来，这样更条理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Email表示数据必须为邮箱格式</span></span><br><span class="line">    <span class="comment">//@Email</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt;maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt;list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>@ImportResource ：导入Spring的配置文件；让配置文件中的内容生效,支持同时导入多个配置文件</p><p>我们自己编写的配置文件 Spring boot无法自动识别，如果想让配置文件生效，需要将@ImportResource标注在一个配置类上。</p><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.huoqiang.demo02.service.HelloService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line">导入配置文件让其生效</span><br></pre></td></tr></table></figure></li><li><p>Spring boot 推荐的给容器添加组件的方式：推荐使用全注解的方式</p><ul><li>使用@Bean给容器中添加组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span> 指明当前类是一个配置类，用来代替spring的配置类</span></span><br><span class="line"><span class="comment"> * 在配置文件中使用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中，容器中这个组件的默认id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;组件添加成功！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于上面的通过xml文件来添加组件</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5、配置文件占位符"><a href="#5、配置文件占位符" class="headerlink" title="5、配置文件占位符"></a>5、配置文件占位符</h2><ul><li><p>随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.<span class="keyword">int</span>&#125;$&#123;random.<span class="keyword">long</span>&#125;$&#123;random.value&#125;$&#123;random.<span class="keyword">long</span>(<span class="number">10</span>)&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p>占位符，获取之前匹配的值，如果没有则可以使用“：”指定值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.name=李四</span><br><span class="line">person.dog.name=$&#123;person.name&#125;_dog</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br></pre></td></tr></table></figure></li></ul><h2 id="6、Profile"><a href="#6、Profile" class="headerlink" title="6、Profile"></a>6、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><ul><li>我们在主配置文件编写的时候，文件名可以是  application-{profile}.properties/yml</li><li>默认使用application.properties中的配置</li><li>配置文件命名如：application-dev.properties  application-prod.properties</li></ul><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><p>文档块由“—”进行分割，每个文档块互不影响</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"> <span class="comment"># 选择激活哪个配置文件进行使用</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span> <span class="comment">#指定属于那个环境</span></span><br></pre></td></tr></table></figure><h3 id="3、激活指定的Profile"><a href="#3、激活指定的Profile" class="headerlink" title="3、激活指定的Profile"></a>3、激活指定的Profile</h3><ul><li>在配置文件中指定profile的名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><ul><li>使用命令行激活</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--spring.profiles.active=dev</span><br></pre></td></tr></table></figure><ul><li>调整虚拟机参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><h2 id="7、配置文件加载位置"><a href="#7、配置文件加载位置" class="headerlink" title="7、配置文件加载位置"></a>7、配置文件加载位置</h2><ul><li>spring boot 启动时会扫描以下位置的application.properties或者application.yml文件作为spring boot的配置文件<ul><li>file../config</li><li>file../</li><li>classpath:/config/</li><li>classpath:/</li></ul></li><li>以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先级的内容会覆盖低优先级配置的内容</li><li>亦可以通过配置spring.config.location来指定配置文件位置，项目打包好后，可以使用命令行参数的形式，在项目启动时指定配置文件的位置</li></ul><h2 id="8、外部配置加载顺序"><a href="#8、外部配置加载顺序" class="headerlink" title="8、外部配置加载顺序"></a>8、外部配置加载顺序</h2><p>Spring Boot 也可以从以下位置加载配置；优先级从高到低，高优先级会覆盖低优先级配置</p><ol><li>命令行参数 </li><li>来自java:comp/env的JNDI属性 </li><li>Java系统属性（System.getProperties()） </li><li>操作系统环境变量 </li><li>RandomValuePropertySource配置的random.*属性值 </li><li>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件 </li><li>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件 </li><li>jar包外部的application.properties或application.yml(不带spring.profile)配置文件 </li><li>jar包内部的application.properties或application.yml(不带spring.profile)配置文件 </li><li>@Configuration注解类上的@PropertySource </li><li>通过SpringApplication.setDefaultProperties指定的默认属性</li></ol><h2 id="9、自动配置原理"><a href="#9、自动配置原理" class="headerlink" title="9、自动配置原理"></a>9、自动配置原理</h2><ul><li><p><a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/appendix-application-properties.html#common-application-properties">配置文件能够配置的属性</a></p></li><li><p>Spring Boot启动时加载主配置类<code>@SpringBootApplication</code>，开启了自动配置功能<code>@EnableAutoConfiguration</code></p></li><li><p>@EnableAutoConfiguration的作用：利用@Import({AutoConfigurationImportSelector.class})为容器中导入组件</p></li><li><p>AutoConfigurationImportSelector中有这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">       List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">       Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> configurations;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>该方法用于获取配置类</p><p>进入SpringFactoriesLoader类中发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">&quot;META-INF/spring.factories&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line">该方法用于扫描所有jar包路径下 META-INF/spring.factories</span><br><span class="line">把扫描到的这些文件的内容包装成properties对象</span><br></pre></td></tr></table></figure></li><li><p>将类路径下所有的META-INF/spring.factories中的配置类都加入到容器中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line"><span class="attr">......</span></span><br></pre></td></tr></table></figure></li><li><p>每一个xxxAutoConfiguration类都是容器的一个组件，用他们来做自动配置</p></li><li><p>以WebMvcAutoConfiguration为例解释自动配置原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//表示这是一个配置类</span></span><br><span class="line">(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span><span class="comment">//spring底层注解，若满足对应条件，整个配置类里面的配置就会生效</span></span><br><span class="line">(</span><br><span class="line">    type = Type.SERVLET</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span><span class="comment">//判断当前项目中有没有这个类</span></span><br><span class="line">(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(-2147483638)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>spring boot在启动时会加载大量的自动配置类</p></li><li><p>给容器中添加组件的时候，会从properties类中获取某些属性，我们就可以在配置文件中指定这些属性的值。</p></li></ul><h2 id="10、-Conditional注解"><a href="#10、-Conditional注解" class="headerlink" title="10、@Conditional注解"></a>10、@Conditional注解</h2><blockquote><p>作用：判断是否满足当前条件</p></blockquote><p>其扩展如下：</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式；</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p>自动配置类必须在一定条件下才能生效，我们可以在配置文件中启用 debug=true ；在运行时控制台会自动打印配置报告，显示已启用的配置类。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Positive matches:</span> <span class="string">--已启用的配置类</span></span><br><span class="line"><span class="string">-----------------</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">AopAutoConfiguration matched:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">@ConditionalOnProperty</span> <span class="string">(spring.aop.auto=true)</span> <span class="string">matched</span> <span class="string">(OnPropertyCondition)</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">AopAutoConfiguration.ClassProxyingConfiguration matched:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">@ConditionalOnMissingClass</span> <span class="string">did</span> <span class="string">not</span> <span class="string">find</span> <span class="string">unwanted</span> <span class="string">class</span> <span class="string">&#x27;org.aspectj.weaver.Advice&#x27;</span> <span class="string">(OnClassCondition)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">@ConditionalOnProperty</span> <span class="string">(spring.aop.proxy-target-class=true)</span> <span class="string">matched</span> <span class="string">(OnPropertyCondition)</span></span><br><span class="line">  <span class="string">......</span></span><br><span class="line"><span class="attr">Negative matches:</span> <span class="string">--未启用的配置类</span></span><br><span class="line"><span class="string">-----------------</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">ActiveMQAutoConfiguration:</span></span><br><span class="line">      <span class="attr">Did not match:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">@ConditionalOnClass</span> <span class="string">did</span> <span class="string">not</span> <span class="string">find</span> <span class="string">required</span> <span class="string">class</span> <span class="string">&#x27;javax.jms.ConnectionFactory&#x27;</span> <span class="string">(OnClassCondition)</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">AopAutoConfiguration.AspectJAutoProxyingConfiguration:</span></span><br><span class="line">      <span class="attr">Did not match:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">@ConditionalOnClass</span> <span class="string">did</span> <span class="string">not</span> <span class="string">find</span> <span class="string">required</span> <span class="string">class</span> <span class="string">&#x27;org.aspectj.weaver.Advice&#x27;</span> <span class="string">(OnClassCondition)</span></span><br><span class="line">   <span class="string">......</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、spring boot入门</title>
      <link href="2020/12/04/%E4%B8%80%E3%80%81spring%20boot%E5%85%A5%E9%97%A8/"/>
      <url>2020/12/04/%E4%B8%80%E3%80%81spring%20boot%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要介绍了spring boot的一些基本情况，以及如何使用spring boot运行出hello world</p></blockquote><a id="more"></a><h2 id="1、spring-boot简介"><a href="#1、spring-boot简介" class="headerlink" title="1、spring boot简介"></a>1、spring boot简介</h2><blockquote><p>简化spring应用开发的一个框架</p><p>整个Spring技术栈的一个大整合</p><p>J2EE开发的一站式解决方案</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><blockquote><p>2014，Martin Flower提出微服务的概念</p><p>微服务是一种架构风格</p><p>一个应用应该是一组小型服务； 可以通过HTTP的方式进行互通</p><p>每一个功能元素最终都是一个可独立升级的软件单元。</p></blockquote><h2 id="3、Spring-boot-Hello-world"><a href="#3、Spring-boot-Hello-world" class="headerlink" title="3、Spring boot Hello world"></a>3、Spring boot Hello world</h2><blockquote><p>一个功能：浏览器发送hello请求，服务器接收请求并处理，响应Hello World字符串；</p></blockquote><h3 id="1-创建一个spring-boot工程"><a href="#1-创建一个spring-boot工程" class="headerlink" title="1. 创建一个spring boot工程"></a>1. 创建一个spring boot工程</h3><p>​    使用spring initializer来创建项目</p><h3 id="2-导入spring-boot的相关依赖"><a href="#2-导入spring-boot的相关依赖" class="headerlink" title="2.导入spring boot的相关依赖"></a>2.导入spring boot的相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-编写主程序启动类"><a href="#3-编写主程序启动类" class="headerlink" title="3. 编写主程序启动类"></a>3. 编写主程序启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huoqiang.demohelloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标注主程序类，说明这是一个springboot 应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoHelloworldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使spring 应用启动起来</span></span><br><span class="line">        SpringApplication.run(DemoHelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-编写控制类"><a href="#4-编写控制类" class="headerlink" title="4. 编写控制类"></a>4. 编写控制类</h3><p>​    位于com.huoqiang.demohelloworld.controller下，在主程序类的下一级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huoqiang.demohelloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-直接运行主程序"><a href="#5-直接运行主程序" class="headerlink" title="5. 直接运行主程序"></a>5. 直接运行主程序</h3><p>​    运行主程序的main方法。在浏览器查看对应端口localhost:8080/hello</p><h3 id="6-将程序打包成jar包"><a href="#6-将程序打包成jar包" class="headerlink" title="6. 将程序打包成jar包"></a>6. 将程序打包成jar包</h3><p>​    首先导入以下依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><p>​    点击编辑器右侧maven-lifecycle-package IDEA自动会将项目打包成jar包，通过控制台信息查看输出路径，最终生成的jar包位于target目录下。直接使用java -jar 命令运行。</p><h2 id="4、Hello-World-探究"><a href="#4、Hello-World-探究" class="headerlink" title="4、Hello World 探究"></a>4、Hello World 探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><ul><li><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">它的父项目</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">用来管理spring boot 应用里所有依赖的版本</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导入的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-boot-starter-web: spring boot 场景启动器；帮我们导入web模块正常运行所依赖的组件</p><p>spring boot 将所有的功能场景都抽取出来，做成一个个启动器，只需要在项目里面引入这些starter，相关场景的所有依赖都会自动给导入。</p></li></ul><h3 id="2、主程序类"><a href="#2、主程序类" class="headerlink" title="2、主程序类"></a>2、主程序类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huoqiang.demohelloworld;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//标注主程序类，说明这是一个springboot 应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoHelloworldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使spring 应用启动起来</span></span><br><span class="line">        SpringApplication.run(DemoHelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Spring Boot Application ：标注在某个类上说明这个类是spring boot的主配置类，spring boot 就应该运行这个类的main方法进行启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><ul><li><p>@Spring Boot Configuration：spring boot 配置类； 标注在某个类上，表名这是一个spring boot 配置类。</p><ul><li>@Configuration： 标注在配置类上，配置类其实就是配置文件；配置类也是容器中的一个组件。</li></ul></li><li><p>@Enable Auto Configuration：开启自动配置功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><ul><li>@Auto Configuration Package：自动配置包，将主配置类的所在包及下边所有子包的所有组件都扫描到spring容器中。</li><li>@Import({AutoConfigurationImportSelector.class})： 给容器中导入一个组件。</li></ul><p>有了自动配置类，免去了我们手动注入配置类。spring boot 在启动时，从类路径下的META-INF/spring.factories中获取@Enable Auto Configuration所指定的值，并将这些值作为自动配置类导入到容器中，自动配置类就生效。所有的自动配置类都位于org.springframework.boot.autoconfugure 文件下边。</p><p>​</p></li></ul><h3 id="3、文件结构"><a href="#3、文件结构" class="headerlink" title="3、文件结构"></a>3、文件结构</h3><ul><li>src<ul><li>main<ul><li>java java文件目录</li><li>resources<ul><li>static 保存所有的静态资源；js、css、img等</li><li>templates 保存所有的模板页面；（spring boot 默认使用嵌入式tomcat，默认不支持jsp文件）；可以使用模板引擎（freemarker，thymeleaf）</li><li>application.properties spring boot的配置文件</li></ul></li></ul></li><li>test 测试文件</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http详解</title>
      <link href="2020/03/25/Http%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/03/25/Http%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Http协议的介绍</p></blockquote><a id="more"></a><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>Hyper Text Transfer Protocol 超文本传输协议</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Hyper Text Transfer Protocol 超文本传输协议</p><h1 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h1><p>客户端以数据端通信时，传送数据的格式</p><h1 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h1><ul><li><p>基于TCP/IP高级传输协议</p></li><li><p>默认端口号：80</p></li><li><p>基于请求/响应模型：一次请求与一次响应相对</p></li><li><p>无状态的：每次数据交换相互独立，不能交换数据</p><h1 id="请求消息数据的格式："><a href="#请求消息数据的格式：" class="headerlink" title="请求消息数据的格式："></a>请求消息数据的格式：</h1></li><li><p>请求行</p><ul><li>格式：请求方式 请求url 请求协议/请求版本</li><li>请求方式：HTTP协议有7种请求方式，常用的有get和post方法    </li><li>get方法的参数在请求行中，url之后，不太安全</li><li>post方法的参数在请求体中，比较安全。</li></ul></li><li><p>请求头：客户端浏览器告诉服务器的一些信息</p></li></ul><p>百度“哔哩哔哩”的请求头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: ...(省略)</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Referer: https:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.122 Safari&#x2F;537.36</span><br></pre></td></tr></table></figure><pre><code>* 两个重要参数    * Referer：告诉服务器发起请求的网页地址        作用：防盗链 用于统计工作    * User-Agent：请求方告诉服务方访问使用的浏览器版本信息</code></pre><ul><li>请求空行： 用于分割post请求的请求头和请求体。</li><li>请求体： 封装post请求方式的参数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_Servlet</title>
      <link href="2020/03/25/Java-Servlet/"/>
      <url>2020/03/25/Java-Servlet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>servlet介绍</p></blockquote><a id="more"></a><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>servlet相关概念</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>运行在服务器端的小程序</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h1 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h1><p>通过web.xml配置servlet：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;servletstudy.servletDemo1&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;&#x2F;servletDemo1&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>执行过程：</p><ul><li>当服务器接收到客户端浏览器的请求后，会解析url的路径，获取访问Servlet的路径</li><li>查找web.xml文件，是否有对应的<url-pattern>内容。</li><li>如果有，则再找对应的全类名。<servlet-class></li><li>tomcat会将字节码文件加载进内存，并为其创建对象。</li><li>调用其方法。</li></ul><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>五个方法：</p><ul><li>创建public void init(ServletConfig servletConfig) 初始化方法，当servlet服务第一次被调用时执行。同时也可以手动配置init方法的执行时机。<ul><li>在web.xm文件下通过标签进行配置。<br>  <code>&lt;load-on-startup&gt;-1&lt;/load-on-startup&gt;</code><br>当值为负数时，第一次被访问时就执行，当值为正数或0时，在服务器启动时便被调用。</li></ul></li><li>提供服务public void service(ServletRequest servletRequest, ServletResponse servletResponse)每次访问Servlet时都会被执行。</li><li>被销毁public void destroy() 只有当服务器正常关闭时，才会被调用。通常用于释放资源。</li><li>public String getServletInfo()</li><li>public ServletConfig getServletConfig()</li></ul><h1 id="Servlet3-0注解配置"><a href="#Servlet3-0注解配置" class="headerlink" title="Servlet3.0注解配置"></a>Servlet3.0注解配置</h1><p>在servlet3.0及以上版本，可以通过注解配置执行。<br>方式：在类前加@WebServlet(“/名称”)即可，名称即为访问路径</p><ul><li>一个servlet可以定义多个访问路径：@WebServlet({“/名称1”,”名称2”,”名称3”})</li><li>路径定义规则：<ol><li>/xxx 路径匹配</li><li>/xxx/xxx 多重路径，目录结构</li><li>*.do 扩展名匹配，注意没有“/”</li></ol></li></ul><p>Webservlet类结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface WebServlet &#123;</span><br><span class="line">    String name() default &quot;&quot;;相当于&lt;servlet-name&gt;</span><br><span class="line">    String[] value() default &#123;&#125;;代表urlpatterns（）的属性配置</span><br><span class="line">    String[] urlPatterns() default &#123;&#125;;相当于&lt;url-pattern&gt;</span><br><span class="line">    int loadOnStartup() default -1;相当于&lt;load-on-startup&gt;</span><br><span class="line">    WebInitParam[] initParams() default &#123;&#125;;</span><br><span class="line">    boolean asyncSupported() default false;</span><br><span class="line">    String smallIcon() default &quot;&quot;;</span><br><span class="line">    String largeIcon() default &quot;&quot;;</span><br><span class="line">    String description() default &quot;&quot;;</span><br><span class="line">    String displayName() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h1><p>Servlet–Defines methods that all servlets must implement. 定义所有servlet必须实现的方法<br>两个继承自Servlet的接口</p><ul><li><p>GenericServlet：<br> 将继承自Servlet的其他方法做了默认为空的实现。只将service方法作为抽象方法</p></li><li><p>HttpServlet：对http协议的一种封装，简化操作<br> 主要方法：doGet() doPost()</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="2020/03/25/Java%E5%8F%8D%E5%B0%84/"/>
      <url>2020/03/25/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>反射的相关概念</p></blockquote><a id="more"></a><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射原理简介</p><p>#框架<br>半成品软件，在框架的基础上进行开发，简化编码</p><p>#反射<br>将类的各个组成部分封装为其他对象，这就是反射机制</p><ul><li><p>好处：</p><ul><li>可以在程序运行过程中操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ul></li><li><p>获取Class对象的方式（注意是Class而非class）</p><ul><li>Class.forName(“全类名”) :将字节码文件加载进内存，返回Class对象 多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li><li>类名.class:通过类名的class属性获取 多用于参数传递</li><li>对象.getClass：getClss()方法在Object类中定义。也就是所有对象均可调用 多用于对象的获取字节码的方式</li></ul></li></ul><p>#结论<br>同一个字节码文件在一次程序的运行过程中只会被加载一次，不论通过那种方式加载进内存的都是同一个</p><ul><li><p>Class对象的功能</p><ul><li><p>获取功能</p><ul><li><p>获取成员变量们  </p><ul><li>Field[] getFields() 返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共（public）字段。</li><li>Field getField(String name) 返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定公共(public)成员字段。</li><li>Field getDeclaredField(String name) 返回一个 Field 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明字段。 </li><li>Field[] getDeclaredFields() 返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段。 </li><li>Field 成员变量获取后的操作<ul><li>Object get(Object obj) 获取值</li><li>void set(Object obj, Object value) 设定值</li><li>即使变量类型为私有的，亦可以通过反射获取到变量的值（忽略访问权限修饰符的安全检查）</li><li>setAccessible(true);//暴力反射，忽略安全修饰符的访问权限检查<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass &#x3D; Person.class;</span><br><span class="line">Person p&#x3D;new Person();</span><br><span class="line">Field[] fields&#x3D;personClass.getFields();</span><br><span class="line">for (Field field : fields) &#123;</span><br><span class="line">System.out.println(field);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Field field &#x3D; personClass.getField(&quot;a&quot;);</span><br><span class="line">Field[] declaredFields &#x3D; personClass.getDeclaredFields();</span><br><span class="line">for (Field declaredField : declaredFields) &#123;</span><br><span class="line">System.out.println(declaredField);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;-----------------------------------------&quot;);</span><br><span class="line">Field name &#x3D; personClass.getDeclaredField(&quot;name&quot;);</span><br><span class="line">name.setAccessible(true);&#x2F;&#x2F;暴力反射，忽略安全修饰符的访问权限检查</span><br><span class="line">Object o &#x3D; name.get(p);</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>获取构造方法们 </p><ul><li>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes) 返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法 </li><li>Constructor&lt;?&gt;[] getConstructors() 返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法。 </li><li>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes) 返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类或接口的指定构造方法。 </li><li>Constructor&lt;?&gt;[] getDeclaredConstructors() 返回 Constructor 对象的一个数组，这些对象反映此 Class 对象表示的类声明的所有构造方法。 </li><li>newInstance(Object… initargs)可用该方法来创建对象</li></ul></li><li><p>获取成员方法们</p><ul><li>Method getMethod(String name, Class&lt;?&gt;… parameterTypes) 返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。 </li><li>Method[] getMethods()  返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。 </li><li>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes) 返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</li><li>Method[] getDeclaredMethods()<br>返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</li></ul></li><li><p>获取类名</p><ul><li>String getName()<br>以 String 的形式返回此 Class 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。 </li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit的使用</title>
      <link href="2020/03/25/Junit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/03/25/Junit%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Junit测试工具的使用</p></blockquote><a id="more"></a><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p>Junit的使用</p><p>#测试分类:</p><ul><li>黑盒测试:不需要写代码，给定输入值，看程序能否给出期望的输出值</li><li>白盒测试：需要写代码，关注程序的具体流程</li></ul><p>1.定义一个测试类（测试用例）<br>    建议测试类名为：被测试类的名+test</p><p>2.定义测试方法：可以独立执行<br>    建议方法名为：被测试方法名+test<br>        返回值： void<br>        参数列表：空参</p><p>3.判定结果：绿色-通过 红色-失败<br>      使用断言操作判定结果</p><p>#Assert断言</p><ul><li>断言相等：assertEquals（100，x）</li><li>断言数组相等： assertArrayEquals（｛1,2,3｝，x）</li><li>断言浮点数相等：assertEquals（3.1416，x，0.0001）</li><li>断言为null：assertNull（x）</li><li>断言为true、false：assertTrue（x&gt;0）assertFalse(x&lt;0) </li><li>assertNotEquals()/assertNotNull()</li></ul><p>#Junit Fixture：初始化测试资源成为Fixture</p><ul><li>@Before：初始化测试对象，例如：input=new FileInputStream（）；</li><li>@After：销毁@Before创建的资源，例如input.close（）</li><li>@BeforeClass：初始化非常耗时的资源，例如创建数据库</li><li>@AfterClass：清理@BeforeClass创建的资源，例如：删除数据库。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet类解析</title>
      <link href="2020/03/25/servlet%E7%B1%BB%E8%A7%A3%E6%9E%90/"/>
      <url>2020/03/25/servlet%E7%B1%BB%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java 相关servlet类的解析</p></blockquote><a id="more"></a><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet ServletConfig,ServletContext,GenericServlet,HttpServlet各自的特点或者作用</p><p>定义所有servlet必须实现的方法。servlet是一个运行在Web服务器中的小型Java程序，通常通过超文本传输协议HTTP接收和响应来自Web客户端的请求。要实现这个接口，可以编写扩展javax.servlet.GenericServlet的通用servlet或扩展javax.servlet.HTTP.HttpServlet的HTTP servlet。</p><p>这个接口定义了初始化servlet、服务请求和从服务器中删除servlet的方法。这些方法称为生命周期方法，按以下顺序调用：</p><ol><li>servlet被构造，然后用init方法初始化。</li><li>将处理客户端对service方法的任何调用。            </li><li>servlet将停止服务，然后使用destroy方法销毁，释放内存。</li></ol><p>除了生命周期方法之外，这个接口还提供getServletConfig方法（servlet可以使用它来获取任何启动信息）和getServletInfo方法（它允许servlet返回自己的基本信息，如作者、版本和版权）。</p><h1 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h1><p>servlet容器在初始化期间用于将信息传递给servlet的servlet配置对象.</p><h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h1><p>定义一组servlet用于与其servlet容器通信的方法，例如，获取文件的MIME类型、分派请求或写入日志文件。</p><p>每个Java虚拟机的每个“web应用程序”都有其对应的配置文件。（一个“web应用程序”是一个servlet和内容的集合，安装在服务器URL名称空间的特定子集下。）</p><p>ServletContext对象包含在ServletConfig对象中，当初始化servlet时，Web服务器将向其提供servlet</p><h1 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h1><p>定义一个通用的、独立于协议的servlet类。若要编写用于Web的HTTP servlet，可以改为扩展HttpServlet。</p><p>GenericServlet实现了Servlet和ServletConfig接口。GenericServlet可以由servlet直接扩展，不过更常见的是扩展特定于协议的子类，如HttpServlet。</p><p>要编写通用servlet，只需重写抽象服务方法。</p><h1 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h1><p>提供要子类化的抽象类，以创建适用于网站的HTTP servlet。HttpServlet的子类必须至少重写一个方法，通常是以下方法之一：</p><ul><li><p>doGet，如果servlet支持HTTP GET请求</p></li><li><p>doPost，用于HTTP POST请求</p></li><li><p>doPut，用于HTTP PUT请求</p></li><li><p>dodelete，用于HTTP DELETE请求</p></li><li><p>init和destroy，用于管理在servlet的生命周期中保留的资源</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="2020/03/16/My-First-Blog/"/>
      <url>2020/03/16/My-First-Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="我建立起属于自己的博客啦！"><a href="#我建立起属于自己的博客啦！" class="headerlink" title="我建立起属于自己的博客啦！"></a>我建立起属于自己的博客啦！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
